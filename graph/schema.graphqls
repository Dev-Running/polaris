# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Date

type User {
  id: String!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  cellphone: String!
  token_user: String
  Enrollment: [Enrollment]
}

input NewUser{
  id: String
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  cellphone: String!
  token_user: String
}

type Course {
  id: String!
  title: String!
  slug: String!
  description: String
  created_at: Date!
  updated_at: Date!
  Lessons:     [Lesson]
  Steps:      [Step]
  Enrollments:  [Enrollment]

}

input NewCourse {
  id: String
  title: String!
  slug: String!
  description: String
  created_at: Date
  updated_at: Date
}

type Enrollment {
  id: String!
  created_at: Date!
  updated_at: Date
  deleted_at: Date
  userId:String!
  courseId:String!

}

input NewEnrollment {
  id: String!
  created_at: Date
  updated_at: Date
  deleted_at: Date
  userId: String!
  courseId: String!
}


type Step {
  id: String!
  title: String!
  description: String!
  slug: String!
  created_at: Date!
  updated_at: Date!
  lessons: [Lesson]
  Course: Course!
  courseId: String!
}

input NewStep {
  title: String!
  description: String!
  slug: String!
  created_at: Date
  updated_at: Date
  courseId: String!

}

type Lesson {
  id: String
  title: String!
  slug: String!
  link: String!
  created_at: Date
  updated_at: Date
  stepId: String!
}

input NewLesson {
  title: String!
  slug: String!
  link: String!
  stepId: String!
}

type Query {
  users: [User]
  courses: [Course]
  steps: [Step]
  lessons: [Lesson]
  enrollments: [Enrollment]


}


type Mutation {
  createUser(input: NewUser!): User!
  createCourse(input: NewCourse!): Course!
  createStep(input: NewStep!): Step!
  createLesson(input: NewLesson!): Lesson!
  createEnrollment(input: NewEnrollment!): Enrollment!
}
