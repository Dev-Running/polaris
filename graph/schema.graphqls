# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Date
scalar Any
scalar Upload

enum Role {
  ADMIN
  USER
}

enum Platform{
  DR
  GITHUB
  GOOGLE
}

type User {
  id: String!
  firstname: String!
  lastname: String!
  role: Role!
  email: String!
  avatar: String!
  platform: Platform!
  github: String!
  bio: String!
  location: String!
  twitter: String!
  site: String!
  username: String!
  password: String!
  token_user: String!
  enrollment: [Enrollment!]!
}


input NewUser{
  firstname: String
  lastname: String
  username: String
  file: Upload
  email: String
  password: String
}

input NewUserGITHUB{
  firstname: String
  lastname: String
  username: String
  avatar: String
  email: String
  github: String
  bio: String
  location: String
  twitter: String
  site: String
}

input NewUserGOOGLE{
  firstname: String
  lastname: String
  username: String
  avatar: String
  email: String  
}


type Course {
  id: String!
  title: String!
  slug: String!
  description: String!
  image: String!
  created_at: Date!
  updated_at: Date!
  lessons:     [Lesson!]!
  steps:      [Step!]!
  enrollments:  [Enrollment!]!
}

input NewCourse {
  title: String
  slug: String
  image:String
  description: String
  created_at: Date
  updated_at: Date
}

type Enrollment {
  id: String!
  created_at: Date!
  updated_at: Date!
  deleted_at: Date!
  userId:String!
  courseId:String!

}

input NewEnrollment {
  userId: String!
  courseId: String!
}


type Step {
  id: String!
  title: String!
  description: String!
  slug: String!
  created_at: Date!
  updated_at: Date!
  lessons: [Lesson]
  courseId: String!
}

input NewStep {
  title: String!
  description: String!
  slug: String!
  courseId: String!

}

type Lesson {
  id: String!
  title: String!
  description: String!
  slug: String!
  link: String!
  created_at: Date!
  updated_at: Date!
  stepId: String!
  courseId: String!
}

input NewLesson {
  title: String
  description: String
  slug: String
  link: String
  stepId: String
  courseId: String
}

type UserAuthenticated {
   id: String!
  firstname: String!
  lastname: String!
  role: Role!
  email: String!
  avatar: String!
  platform: Platform!
  github: String!
  bio: String!
  location: String!
  twitter: String!
  site: String!
  username: String!
  token_user: String!
  enrollment: [Enrollment!]!
}

input AuthenticationInput{
  token: String
  email: String
  password: String
}
input GetUserAuthInput{
  token: String
}

type Query {
  users: [User!]!
  courses: [Course!]!
  steps: [Step]
  lessons: [Lesson]
  enrollments: [Enrollment!]!
  userAuthenticated(input: GetUserAuthInput): UserAuthenticated!
}



type Mutation {

  authentication(input:AuthenticationInput): User!
  createUser(input: NewUser): User!
  createUserGITHUB(input: NewUserGITHUB): User!
  createUserGOOGLE(input: NewUserGOOGLE): User!
  createCourse(input: NewCourse!): Course!
  createStep(input: NewStep!): Step!
  createLesson(input: NewLesson!): Lesson!
  createEnrollment(input: NewEnrollment!): Enrollment!
}
