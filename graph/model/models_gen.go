// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type AuthenticationInput struct {
	Token    *string `json:"token"`
	Email    *string `json:"email"`
	Password *string `json:"password"`
}

type Course struct {
	ID          string        `json:"id"`
	Title       string        `json:"title"`
	Slug        string        `json:"slug"`
	Description string        `json:"description"`
	Image       string        `json:"image"`
	CreatedAt   string        `json:"created_at"`
	UpdatedAt   string        `json:"updated_at"`
	Lessons     []*Lesson     `json:"lessons"`
	Steps       []*Step       `json:"steps"`
	Enrollments []*Enrollment `json:"enrollments"`
}

type Enrollment struct {
	ID        string `json:"id"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	DeletedAt string `json:"deleted_at"`
	UserID    string `json:"userId"`
	CourseID  string `json:"courseId"`
}

type GetUserAuthInput struct {
	Token *string `json:"token"`
}

type Lesson struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Slug        string `json:"slug"`
	Link        string `json:"link"`
	CreatedAt   string `json:"created_at"`
	UpdatedAt   string `json:"updated_at"`
	StepID      string `json:"stepId"`
	CourseID    string `json:"courseId"`
}

type NewCourse struct {
	Title       *string `json:"title"`
	Slug        *string `json:"slug"`
	Image       *string `json:"image"`
	Description *string `json:"description"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
}

type NewEnrollment struct {
	UserID   string `json:"userId"`
	CourseID string `json:"courseId"`
}

type NewLesson struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Slug        *string `json:"slug"`
	Link        *string `json:"link"`
	StepID      *string `json:"stepId"`
	CourseID    *string `json:"courseId"`
}

type NewStep struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Slug        string `json:"slug"`
	CourseID    string `json:"courseId"`
}

type NewUser struct {
	Firstname *string         `json:"firstname"`
	Lastname  *string         `json:"lastname"`
	Username  *string         `json:"username"`
	File      *graphql.Upload `json:"file"`
	Email     *string         `json:"email"`
	Password  *string         `json:"password"`
	Cellphone *string         `json:"cellphone"`
}

type Step struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Slug        string    `json:"slug"`
	CreatedAt   string    `json:"created_at"`
	UpdatedAt   string    `json:"updated_at"`
	Lessons     []*Lesson `json:"lessons"`
	CourseID    string    `json:"courseId"`
}

type User struct {
	ID         string        `json:"id"`
	Firstname  string        `json:"firstname"`
	Lastname   string        `json:"lastname"`
	Role       Role          `json:"role"`
	Email      string        `json:"email"`
	Avatar     *string       `json:"avatar"`
	Username   string        `json:"username"`
	Password   string        `json:"password"`
	Cellphone  string        `json:"cellphone"`
	TokenUser  string        `json:"token_user"`
	Enrollment []*Enrollment `json:"enrollment"`
}

type UserAuthenticated struct {
	ID        *string `json:"id"`
	Firstname *string `json:"firstname"`
	Lastname  *string `json:"lastname"`
	Username  *string `json:"username"`
	Email     *string `json:"email"`
	Avatar    *string `json:"avatar"`
	Cellphone *string `json:"cellphone"`
	TokenUser *string `json:"token_user"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
